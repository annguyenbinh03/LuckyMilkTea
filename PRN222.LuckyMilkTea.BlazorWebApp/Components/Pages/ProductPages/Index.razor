@page "/products"
@using Microsoft.AspNetCore.Components.QuickGrid
@using PRN222.MilkTeaShop.Repository.Models
@using PRN222.MilkTeaShop.Service.Services
@using PRN222.MilkTeaShop.Service.Services.Interface
@using BlazorBootstrap

@inject IProductService ProductService
@inject ISizeService SizeService
@inject IOrderDetailService OrderDetailService
@inject IOrderService OrderService

@rendermode InteractiveServer
<PageTitle>Index</PageTitle>

<h1 class="page-title">Sản Phẩm</h1>
@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success" role="alert">
        @successMessage
    </div>
}
<div class="product-container">
    @foreach (var product in products)
    {
        <div class="product-card">
            <img src="@product.ImageUrl" alt="@product.Name" class="product-image" />
            <div class="product-details">
                <h3>@product.Name</h3>
                <p class="text-truncate">@product.Description</p>
                <Button @onclick="() => OnShowModalClick(product)" class="btn btn-primary product-buy-button">
                    <i class="bi bi-cart-plus"></i>
                </Button>
            </div>
        </div>
    }
</div>

<Modal @ref="modal" Title="Chốt Đơn">
    <BodyTemplate>
        @if (selectedProduct != null)
        {
            <div>
                <h3>@selectedProduct.Name</h3>
                <p>@selectedProduct.Description</p>
                <img src="@selectedProduct.ImageUrl" alt="@selectedProduct.Name" class="product-image" />

                @if (selectedProduct.CategoryId == 1) // Trà sữa
                {
                    <label for="sizeSelect">Chọn Size:</label>
                    <select id="sizeSelect" @bind="selectedSizeId" class="form-control">
                        @foreach (var size in sizes)
                        {
                            var sizePrice = selectedProduct.ProductSizes.FirstOrDefault(ps => ps.SizeId == size.Id)?.Price ?? 0;
                            <option value="@size.Id">@size.Name - @string.Format("{0:C}", sizePrice)</option>
                        }
                    </select>

                    <label>Chọn Topping:</label>
                    <div>
                        @foreach (var topping in availableToppings)
                        {
                            <div>
                                <input type="checkbox"
                                       id="topping-@topping.Id"
                                       value="@topping.Id"
                                       @onchange="(e) => OnToppingChanged(e, topping)"
                                       checked="@(selectedToppings.Contains(topping.Id.ToString()))" />
                                <label for="topping-@topping.Id">@topping.Name - @string.Format("{0:C}", topping.Price)</label>
                            </div>
                        }
                    </div>

                    <label>Giá:</label>
                    <div>
                        <p style="font-size: 20px; font-weight: bold; color: red;">
                            @string.Format("{0:C}", CalculateTotalPrice())
                        </p>
                    </div>
                }
                else if (selectedProduct.CategoryId == 2) // Combo
                {
                    <label>Chi tiết Combo:</label>
                    <div class="combo-items">
                        @foreach (var comboItem in selectedProduct.ProductComboCombos) // Sử dụng ProductComboCombos
                        {
                            <div class="combo-item">
                                <img src="@comboItem.Product.ImageUrl" alt="@comboItem.Product.Name" class="combo-item-image" />
                                <div class="combo-item-details">
                                    <p>
                                        <strong>@comboItem.Product.Name</strong>
                                        @if (comboItem.ProductSize != null)
                                        {
                                            <span>(@comboItem.ProductSize.Size.Name)</span>
                                        }
                                        - Số lượng: @comboItem.Quantity
                                    </p>
                                    <p>
                                        Giá: @string.Format("{0:C}", (comboItem.ProductSize?.Price ?? comboItem.Product.Price ?? 0) * comboItem.Quantity)
                                    </p>
                                </div>
                            </div>
                        }
                    </div>

                    <label>Giá Tổng:</label>
                    <div>
                        <p style="font-size: 20px; font-weight: bold; color: red;">
                            @string.Format("{0:C}", selectedProduct.Price)
                        </p>
                    </div>
                }
            </div>
        }
        else
        {
            <p>Loading...</p>
        }
    </BodyTemplate>

    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Đóng</Button>
        <Button Color="ButtonColor.Primary" @onclick="() => AddToCart(selectedProduct, selectedSizeId, selectedToppings, CalculateTotalPrice())">Thêm vào giỏ hàng</Button>
    </FooterTemplate>
</Modal>

@code {
    private string successMessage = string.Empty;
    private List<Product> products = new List<Product>();
    private List<Size> sizes = new List<Size>();
    private List<Product> availableToppings = new List<Product>();
    private Modal modal = default!;
    private Product? selectedProduct;
    private int selectedSizeId = 1;
    private List<string> selectedToppings = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        products = await ProductService.GetStartMilkTeas();
        sizes = await SizeService.GetListSize();
        availableToppings = await ProductService.GetToppingAsync();
    }

    private void OnToppingChanged(ChangeEventArgs e, Product topping)
    {
        if (e.Value is bool isChecked)
        {
            if (isChecked && !selectedToppings.Contains(topping.Id.ToString()))
            {
                selectedToppings.Add(topping.Id.ToString());
            }
            else if (!isChecked && selectedToppings.Contains(topping.Id.ToString()))
            {
                selectedToppings.Remove(topping.Id.ToString());
            }
            StateHasChanged();
        }
    }

    private decimal CalculateTotalPrice()
    {
        if (selectedProduct == null) return 0;

        decimal basePrice = 0;
        if (selectedProduct.CategoryId == 1) // Trà sữa
        {
            basePrice = selectedProduct.ProductSizes
                .FirstOrDefault(x => x.SizeId == selectedSizeId)?.Price ?? 0;

            decimal toppingsPrice = selectedToppings
                .Select(toppingId => availableToppings.First(t => t.Id.ToString() == toppingId).Price ?? 0)
                .Sum();

            return basePrice + toppingsPrice;
        }
        else if (selectedProduct.CategoryId == 2) // Combo
        {
            return selectedProduct.Price ?? 0;
        }

        return basePrice;
    }

    private async Task AddToCart(Product product, int sizeId, List<string> toppings, decimal totalPrice)
    {
        try
        {
            // Tạo Order
            Order order = new Order
            {
                CreatedAt = DateTime.Now,
                TotalPrice = totalPrice,
                UpdatedAt = DateTime.Now,
                Status = "pending"
            };
            var createdOrder = await OrderService.CreateOrderAsync(order);
            if (createdOrder == null)
            {
                successMessage = "Có lỗi khi tạo đơn hàng.";
                StateHasChanged();
                return;
            }

            // Tạo OrderDetail cho sản phẩm chính
            decimal productPrice = product.CategoryId == 1
                ? product.ProductSizes.FirstOrDefault(x => x.SizeId == sizeId)?.Price ?? 0
                : product.Price ?? 0;

            OrderDetail orderDetail = new OrderDetail
            {
                OrderId = createdOrder.Id,
                ProductId = product.Id,
                Quantity = 1,
                Price = productPrice,
                SizeId = product.CategoryId == 1 ? sizeId : null
            };
            await OrderDetailService.CreateOrderDetailAsync(orderDetail);

            // Tạo OrderDetail cho topping (chỉ áp dụng cho trà sữa)
            if (product.CategoryId == 1)
            {
                foreach (var toppingId in toppings)
                {
                    var topping = availableToppings.FirstOrDefault(t => t.Id.ToString() == toppingId);
                    if (topping != null)
                    {
                        OrderDetail toppingDetail = new OrderDetail
                        {
                            OrderId = createdOrder.Id,
                            ProductId = topping.Id,
                            Quantity = 1,
                            Price = topping.Price ?? 0,
                            ParentId = orderDetail.Id
                        };
                        await OrderDetailService.CreateOrderDetailAsync(toppingDetail);
                    }
                }
            }
            // Tạo OrderDetail cho các sản phẩm trong combo (nếu là combo)
            else if (product.CategoryId == 2)
            {
                foreach (var comboItem in product.ProductComboCombos)
                {
                    OrderDetail comboItemDetail = new OrderDetail
                    {
                        OrderId = createdOrder.Id,
                        ProductId = comboItem.ProductId,
                        Quantity = comboItem.Quantity,
                        Price = comboItem.Product.ProductSizes.FirstOrDefault(ps => ps.SizeId == comboItem.ProductSize?.SizeId)?.Price ?? comboItem.Product.Price ?? 0,
                        SizeId = comboItem.ProductSize?.SizeId,
                        ParentId = orderDetail.Id
                    };
                    await OrderDetailService.CreateOrderDetailAsync(comboItemDetail);
                }
            }

            successMessage = "Đơn hàng đã được tạo thành công!";
            await modal?.HideAsync();
        }
        catch (Exception ex)
        {
            successMessage = $"Có lỗi khi tạo đơn hàng: {ex.Message}";
        }
        StateHasChanged();
    }

    private async Task OnShowModalClick(Product product)
    {
        selectedProduct = product;
        selectedToppings.Clear();
        selectedSizeId = sizes.FirstOrDefault()?.Id ?? 1;
        await modal.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        await modal?.HideAsync();
    }
}

<style>
    .page-title {
        text-align: center;
        font-size: 2rem;
        color: #333;
        margin-bottom: 20px;
    }

    .product-container {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        gap: 20px;
        margin-top: 20px;
    }

    .product-card {
        background-color: #fff;
        border-radius: 15px;
        overflow: hidden;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        text-align: center;
        padding: 15px;
        display: flex;
        flex-direction: column;
        transition: transform 0.3s, box-shadow 0.3s;
    }

    .product-card:hover {
        transform: translateY(-10px);
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
    }

    .product-image {
        width: 100%;
        height: 200px;
        object-fit: cover;
        border-radius: 10px;
    }

    .product-details {
        margin-top: 15px;
        flex-grow: 1;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
    }

    .product-details h3 {
        font-size: 1.5rem;
        font-weight: bold;
        color: #333;
        margin-bottom: 8px;
    }

    .product-details p {
        font-size: 1rem;
        color: #777;
        margin-bottom: 10px;
        flex-grow: 1;
    }

    .product-buy-button {
        padding: 10px;
        font-size: 1.2rem;
        color: white;
        background-color: #007bff;
        border: none;
        border-radius: 50%;
        width: 50px;
        height: 50px;
        cursor: pointer;
        transition: background-color 0.3s;
        align-self: center;
    }

    .product-image {
        width: 100%;
        height: auto;
        max-width: 150px;
        margin: 0 auto;
        display: block;
    }

    .product-buy-button:hover {
        background-color: #0056b3;
    }

    /* CSS cho chi tiết combo */
    .combo-items {
        display: flex;
        flex-direction: column;
        gap: 15px;
        margin-top: 10px;
    }

    .combo-item {
        display: flex;
        align-items: center;
        gap: 15px;
        border-bottom: 1px solid #eee;
        padding-bottom: 10px;
    }

    .combo-item-image {
        width: 60px;
        height: 60px;
        object-fit: cover;
        border-radius: 5px;
    }

    .combo-item-details {
        flex-grow: 1;
    }

    .combo-item-details p {
        margin: 0;
        font-size: 1rem;
        color: #333;
    }

    .combo-item-details p strong {
        font-weight: bold;
    }
</style>