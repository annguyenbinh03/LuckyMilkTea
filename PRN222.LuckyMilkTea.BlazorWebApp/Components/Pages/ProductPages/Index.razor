@page "/products"
@using Microsoft.AspNetCore.Components.QuickGrid
@using PRN222.MilkTeaShop.Repository.Models
@using PRN222.MilkTeaShop.Service.Services
@using PRN222.MilkTeaShop.Service.Services.Interface
@using BlazorBootstrap
@using PRN222.LuckyMilkTea.BlazorWebApp.Service
@inject IProductService ProductService
@inject ISizeService SizeService
@inject IOrderDetailService OrderDetailService
@inject IOrderService OrderService
@inject CartService CartService
@inject NavigationManager Navigation

@rendermode InteractiveServer
<PageTitle>Index</PageTitle>

<h1 class="page-title">Sản Phẩm</h1>
@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success fade show" role="alert">
        @successMessage
    </div>
}
<div class="product-container">
    @foreach (var product in products)
    {
        <div class="product-card">
            <img src="@product.ImageUrl" alt="@product.Name" class="product-image" />
            <div class="product-details">
                <h3>@product.Name</h3>
                <p class="text-truncate">@product.Description</p>
                <p class="product-price">
                    @if (product.CategoryId == 1)
                    {
                        var minPrice = product.ProductSizes.OrderBy(ps => ps.Price).FirstOrDefault()?.Price ?? 0;
                        <span>Từ @string.Format("{0:C}", minPrice)</span>
                    }
                    else if (product.CategoryId == 2)
                    {
                        <span>@string.Format("{0:C}", product.Price)</span>
                    }
                </p>
                <p class="sold-count">Đã bán: @(product.SoldCount ?? 0)</p> <!-- Add SoldCount here -->
                <Button @onclick="() => OnShowModalClick(product)" class="btn btn-primary product-buy-button">
                    <i class="bi bi-cart-plus"></i>
                </Button>
            </div>
        </div>
    }
</div>

<Modal @ref="modal" Title="Chốt Đơn">
    <BodyTemplate>
        @if (selectedProduct != null)
        {
            <div class="modal-content-wrapper">
                <div class="product-header">
                    <h3>@selectedProduct.Name</h3>
                    <p>@selectedProduct.Description</p>
                    <img src="@selectedProduct.ImageUrl" alt="@selectedProduct.Name" class="product-image" />
                </div>

                <!-- Quantity Selector -->
                <div class="option-section">
                    <label>Số lượng:</label>
                    <div class="quantity-selector">
                        <button class="quantity-btn" @onclick="DecreaseQuantity">
                            <i class="bi bi-dash"></i>
                        </button>
                        <span class="quantity-value">@quantity</span>
                        <button class="quantity-btn" @onclick="IncreaseQuantity">
                            <i class="bi bi-plus"></i>
                        </button>
                    </div>
                </div>

                @if (selectedProduct.CategoryId == 1) // Trà sữa
                {
                    <div class="option-section">
                        <label for="sizeSelect">Chọn Size:</label>
                        <select id="sizeSelect" @bind="selectedSizeId" class="form-control">
                            @foreach (var size in sizes)
                            {
                                var sizePrice = selectedProduct.ProductSizes.FirstOrDefault(ps => ps.SizeId == size.Id)?.Price ?? 0;
                                <option value="@size.Id">@size.Name - @string.Format("{0:C}", sizePrice)</option>
                            }
                        </select>
                    </div>

                    <div class="option-section">
                        <label>Chọn Topping:</label>
                        @if (!string.IsNullOrEmpty(toppingMessage))
                        {
                            <div class="alert alert-warning" role="alert">
                                @toppingMessage
                            </div>
                        }
                        <div class="topping-list">
                            @foreach (var topping in availableToppings)
                            {
                                <div class="topping-item">
                                    <img src="@topping.ImageUrl" alt="@topping.Name" class="topping-image" />
                                    <div class="topping-details">
                                        <label for="topping-@topping.Id">
                                            @topping.Name
                                            <span class="topping-price">@string.Format("{0:C}", topping.Price)</span>
                                        </label>
                                    </div>
                                    <input type="checkbox"
                                           id="topping-@topping.Id"
                                           value="@topping.Id"
                                           @onchange="(e) => OnToppingChanged(e, topping)"
                                           checked="@(selectedToppings.Contains(topping.Id.ToString()))"
                                           disabled="@(selectedToppings.Count >= 3 && !selectedToppings.Contains(topping.Id.ToString()))" />
                                </div>
                            }
                        </div>
                    </div>

                    <div class="price-section">
                        <label>Giá:</label>
                        <p class="total-price">@string.Format("{0:C}", CalculateTotalPrice())</p>
                    </div>
                }
                else if (selectedProduct.CategoryId == 2) // Combo
                {
                    <div class="option-section">
                        <label>Chi tiết Combo:</label>
                        <div class="combo-items">
                            @foreach (var comboItem in selectedProduct.ProductComboCombos)
                            {
                                <div class="combo-item">
                                    <img src="@comboItem.Product.ImageUrl" alt="@comboItem.Product.Name" class="combo-item-image" />
                                    <div class="combo-item-details">
                                        <p>
                                            <strong>@comboItem.Product.Name</strong>
                                            @if (comboItem.ProductSize != null)
                                            {
                                                <span>(@comboItem.ProductSize.Size.Name)</span>
                                            }
                                            - Số lượng: @comboItem.Quantity
                                        </p>
                                        <p class="combo-item-price">
                                            Giá: @string.Format("{0:C}", (comboItem.ProductSize?.Price ?? comboItem.Product.Price ?? 0) * comboItem.Quantity)
                                        </p>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>

                    <div class="price-section">
                        <label>Giá Tổng:</label>
                        <p class="total-price">@string.Format("{0:C}", selectedProduct.Price * quantity)</p>
                    </div>
                }
            </div>
        }
        else
        {
            <p>Loading...</p>
        }
    </BodyTemplate>

    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Đóng</Button>
        <Button Color="ButtonColor.Primary" @onclick="() => AddToCart(selectedProduct, selectedSizeId, selectedToppings, CalculateTotalPrice())">Thêm vào giỏ hàng</Button>
    </FooterTemplate>
</Modal>


@code {
    private string successMessage = string.Empty;
    private List<Product> products = new List<Product>();
    private List<Size> sizes = new List<Size>();
    private List<Product> availableToppings = new List<Product>();
    private Modal modal = default!;
    private Product? selectedProduct;
    private int selectedSizeId = 1;
    private List<string> selectedToppings = new List<string>();
    private int quantity = 1;
    private string toppingMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        products = await ProductService.GetStartMilkTeas();
        sizes = await SizeService.GetListSize();
        availableToppings = await ProductService.GetToppingAsync();
    }

    private void IncreaseQuantity()
    {
        quantity++;
    }

    private void DecreaseQuantity()
    {
        if (quantity > 1)
        {
            quantity--;
        }
    }

    private void OnToppingChanged(ChangeEventArgs e, Product topping)
    {
        if (e.Value is bool isChecked)
        {
            // Nếu topping được chọn và số lượng topping đã chọn ít hơn 3
            if (isChecked && selectedToppings.Count < 3 && !selectedToppings.Contains(topping.Id.ToString()))
            {
                selectedToppings.Add(topping.Id.ToString());
                toppingMessage = string.Empty;  // Xóa thông báo nếu còn chỗ chọn topping
            }
            // Nếu topping bị bỏ chọn
            else if (!isChecked && selectedToppings.Contains(topping.Id.ToString()))
            {
                selectedToppings.Remove(topping.Id.ToString());
                toppingMessage = string.Empty;  // Xóa thông báo nếu topping bị bỏ
            }
            // Nếu topping được chọn nhưng đã có 3 topping, hiển thị thông báo
            else if (isChecked && selectedToppings.Count >= 3)
            {
                toppingMessage = "Bạn chỉ có thể chọn tối đa 3 topping!";
                StateHasChanged();
                return;
            }

            StateHasChanged();
        }
    }


    private decimal CalculateTotalPrice()
    {
        if (selectedProduct == null) return 0;

        decimal basePrice = 0;
        if (selectedProduct.CategoryId == 1) // Trà sữa
        {
            basePrice = selectedProduct.ProductSizes
                .FirstOrDefault(x => x.SizeId == selectedSizeId)?.Price ?? 0;

            decimal toppingsPrice = selectedToppings
                .Select(toppingId => availableToppings.First(t => t.Id.ToString() == toppingId).Price ?? 0)
                .Sum();

            return (basePrice + toppingsPrice) * quantity;
        }
        else if (selectedProduct.CategoryId == 2) // Combo
        {
            return (selectedProduct.Price ?? 0) * quantity;
        }

        return basePrice;
    }

    private async Task AddToCart(Product product, int sizeId, List<string> toppings, decimal totalPrice)
    {
        string sizeName = sizes.FirstOrDefault(s => s.Id == selectedSizeId)?.Name ?? "Unknown Size";
        if (product.CategoryId == 2)
        {
            sizeName = product.Name;
        }

        // Tính totalPrice đúng với số lượng
        decimal itemTotalPrice = CalculateTotalPrice(); // Đã bao gồm quantity

        // Thêm sản phẩm vào giỏ hàng
        CartService.AddToCart(product, sizeId, sizeName, toppings, itemTotalPrice, quantity);

        // Tăng SoldCount của sản phẩm theo số lượng mua
        product.SoldCount = (product.SoldCount ?? 0) + quantity;
        // Cập nhật SoldCount trong cơ sở dữ liệu
        await ProductService.UpdateProductSoldCount(product.Id, product.SoldCount ?? 0);
      

        // Hiển thị thông báo thành công
        successMessage = "Sản phẩm đã được thêm vào giỏ hàng!";
        StateHasChanged();
        await Task.Delay(1000);
        successMessage = string.Empty;
        StateHasChanged();
        await modal?.HideAsync();
    }

    private async Task OnShowModalClick(Product product)
    {
        selectedProduct = product;
        selectedToppings.Clear();
        selectedSizeId = sizes.FirstOrDefault()?.Id ?? 1;
        quantity = 1;
        await modal.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        await modal?.HideAsync();
    }
}

<style>
    /* Tổng thể */
    :root {
        --primary-color: #ff8c66; /* Màu cam nhẹ */
        --secondary-color: #ffe4c4; /* Màu be nhạt (giống trà sữa) */
        --text-color: #4a2c2a; /* Màu nâu đậm */
        --accent-color: #ff6347; /* Màu cam đậm cho điểm nhấn */
        --background-color: #fffaf0; /* Màu nền nhạt */
    }

    body {
        background-color: var(--background-color);
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        color: var(--text-color);
    }

    /* Tiêu đề trang */
    .page-title {
        text-align: center;
        font-size: 2.5rem;
        font-weight: 700;
        color: var(--text-color);
        margin-bottom: 30px;
        text-transform: uppercase;
        letter-spacing: 2px;
    }

    /* Danh sách sản phẩm */
    .product-container {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
        gap: 25px;
        padding: 20px;
    }

    .product-card {
        background-color: #fff;
        border-radius: 20px;
        overflow: hidden;
        box-shadow: 0 6px 15px rgba(0, 0, 0, 0.1);
        text-align: center;
        padding: 15px;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        border: 2px solid var(--secondary-color);
    }

    .product-card:hover {
        transform: translateY(-10px);
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.15);
        border-color: var(--primary-color);
    }

    .product-image {
        width: 100%;
        height: 220px;
        object-fit: cover;
        border-radius: 15px;
        transition: transform 0.3s ease;
    }

    .product-card:hover .product-image {
        transform: scale(1.05);
    }

    .product-details {
        margin-top: 15px;
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .product-details h3 {
        font-size: 1.6rem;
        font-weight: 600;
        color: var(--text-color);
        margin: 0;
    }

    .product-details p {
        font-size: 1rem;
        color: #666;
        margin: 0;
    }

    .product-price {
        font-size: 1.2rem;
        font-weight: 500;
        color: var(--accent-color);
        margin: 5px 0;
    }

    .product-buy-button {
        background-color: var(--primary-color);
        border: none;
        border-radius: 50%;
        width: 50px;
        height: 50px;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: background-color 0.3s ease, transform 0.3s ease;
        align-self: center;
    }

    .product-buy-button:hover {
        background-color: var(--accent-color);
        transform: scale(1.1);
    }

    /* Modal */
    .modal-content-wrapper {
        padding: 20px;
        background-color: #fff;
        border-radius: 15px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
    }

    .product-header {
        text-align: center;
        margin-bottom: 20px;
    }

    .product-header h3 {
        font-size: 1.8rem;
        font-weight: 600;
        color: var(--text-color);
        margin-bottom: 10px;
    }

    .product-header p {
        font-size: 1rem;
        color: #666;
        margin-bottom: 15px;
    }

    .product-header .product-image {
        width: 100%;
        max-width: 200px;
        height: auto;
        border-radius: 10px;
        margin: 0 auto;
        display: block;
    }

    .option-section {
        margin-bottom: 20px;
    }

    .option-section label {
        font-size: 1.2rem;
        font-weight: 500;
        color: var(--text-color);
        margin-bottom: 10px;
        display: block;
    }

    /* Quantity Selector */
    .quantity-selector {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .quantity-btn {
        width: 30px;
        height: 30px;
        border-radius: 50%;
        border: 1px solid var(--primary-color);
        background-color: white;
        color: var(--primary-color);
        font-size: 1rem;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .quantity-btn:hover {
        background-color: var(--primary-color);
        color: white;
    }

    .quantity-value {
        font-size: 1.2rem;
        font-weight: 500;
        min-width: 30px;
        text-align: center;
    }

    .form-control {
        border: 2px solid var(--secondary-color);
        border-radius: 8px;
        padding: 8px;
        font-size: 1rem;
        transition: border-color 0.3s ease;
    }

    .form-control:focus {
        border-color: var(--primary-color);
        box-shadow: 0 0 5px rgba(255, 140, 102, 0.3);
        outline: none;
    }

    /* Topping */
    .topping-list {
        display: flex;
        flex-direction: column;
        gap: 15px;
    }

    .topping-item {
        display: flex;
        align-items: center;
        gap: 15px;
        padding: 10px;
        background-color: var(--secondary-color);
        border-radius: 10px;
        transition: background-color 0.3s ease;
    }

    .topping-item:hover {
        background-color: #ffdab9;
    }

    .topping-image {
        width: 50px;
        height: 50px;
        object-fit: cover;
        border-radius: 8px;
        border: 2px solid var(--primary-color);
    }

    .topping-details {
        flex-grow: 1;
    }

    .topping-details label {
        font-size: 1rem;
        color: var(--text-color);
        cursor: pointer;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .topping-price {
        font-size: 0.9rem;
        font-weight: 500;
        color: var(--accent-color);
    }

    .topping-item input[type="checkbox"] {
        width: 18px;
        height: 18px;
        accent-color: var(--primary-color);
    }

    /* Chi tiết combo */
    .combo-items {
        display: flex;
        flex-direction: column;
        gap: 15px;
        margin-top: 10px;
    }

    .combo-item {
        display: flex;
        align-items: center;
        gap: 15px;
        padding: 10px;
        background-color: var(--secondary-color);
        border-radius: 10px;
        transition: background-color 0.3s ease;
    }

    .combo-item:hover {
        background-color: #ffdab9;
    }

    .combo-item-image {
        width: 70px;
        height: 70px;
        object-fit: cover;
        border-radius: 8px;
        border: 2px solid var(--primary-color);
    }

    .combo-item-details {
        flex-grow: 1;
    }

    .combo-item-details p {
        margin: 0;
        font-size: 1rem;
        color: var(--text-color);
    }

    .combo-item-details p strong {
        font-weight: 600;
    }

    .combo-item-price {
        color: var(--accent-color);
        font-weight: 500;
    }

    /* Giá tổng */
    .price-section {
        text-align: center;
        margin-top: 20px;
    }

    .price-section label {
        font-size: 1.2rem;
        font-weight: 500;
        color: var(--text-color);
    }

    .total-price {
        font-size: 1.8rem;
        font-weight: 700;
        color: var(--accent-color);
        margin: 5px 0 0 0;
    }

    /* Responsive */
    @@media (max-width: 768px) {
        .product-container {
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 15px;
            padding: 10px;
        }

        .product-card {
            padding: 10px;
        }

        .product-image {
            height: 180px;
        }

        .product-details h3 {
            font-size: 1.4rem;
        }

        .product-details p {
            font-size: 0.9rem;
        }

        .product-price {
            font-size: 1rem;
        }

        .modal-content-wrapper {
            padding: 15px;
        }

        .product-header h3 {
            font-size: 1.5rem;
        }

        .combo-item-image {
            width: 50px;
            height: 50px;
        }

        .combo-item-details p {
            font-size: 0.9rem;
        }

        .topping-image {
            width: 40px;
            height: 40px;
        }

        .topping-details label {
            font-size: 0.9rem;
        }

        .topping-price {
            font-size: 0.8rem;
        }

        .total-price {
            font-size: 1.5rem;
        }
        .sold-count {
            font-size: 1rem;
            font-weight: 500;
            color: var(--text-color);
            margin: 5px 0;
        }
    }
</style>